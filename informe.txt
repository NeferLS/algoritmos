Práctica 4. 
Ordenación de Montículos. 
Complejidad Computacional de la ordenación de vectores por Montículos.

-- Autores: 
        Pablo Castro Freire
	    Nefer Labrada Suárez
	    Adrián Formigo Gómez


-- Introducción:

En el siguiente informe, se exponen los resultados del estudio de la carga computacional de ordenar "n" elementos mediante
el método de Ordenación por Montículos en tres casos diferentes: (a) ordenación de un vector ordenado ascendientemente,
(b) ordenación de un vector ordenado descendientemente y (c) ordenación de un vector ordenado aleatoriamente.

Asimismo, compararemos los resultados de dichas ordenaciones con otras de los informes anteriores.
Las ordenaciones con las que compararemos los resultados de este documento serán:
(1) Ordenacion por Inserción
(2) Ordenación Rápida (Quicksort)

Todas las mediciones se realizarán comparándolas con una cota subestimada <f(n)>, una cota ajustada <g(n)> y una cota sobreestimada <h(n)>, 
para verificar el comportamiento y carga computacional de la función de ordenación pertinente. 

# Las unidades de todas las mediciones de tiempo, así como sus comparaciones, están hechas en microsegundos (µs). #

-- Características:

Estas son Características de la máquina usada para llevar a cabo las mediciones:

- CPU: 13th Gen Intel® Core™ i5-1335U × 12
- Velocidad de reloj: 4.6 GHz
- Memoria: 16,0 GiB
- Distribución de Linux: Ubuntu 24.04.1 LTS
- Versión de Kernel: Linux 6.8.0-45-generic

***!! En este estudio existen casos anómalos que se han intentado evitar sin éxito. Serán mencionados en sus respectivos lugares. !!***

-- Análisis de las implementaciones de Ordenación por Montículo:

Este análisis consta de diversas partes:
	
	a. Crear las operaciones necesarias para trabajar con montículos de mínimos. Esto es; implementación y funciones base, las cuales serán
       inicializar un montículo, insertar en un montículo, quitar el valor menor, consultar el valor menor y crear un montículo de mínimos.
	
	b. Comprobar que la carga computacional de las funciones "crear Montículo" e "insertar Montículo", siendo O(n) y O(n log n) respectivamente.
	
	c. Calcular empíricamente la complejidad computacional de ordenar "n" elementos en cada uno de los tres casos antes mencionados: ordenar
       un vector ordenado ascendientemente, un vector ordenado descendientemente y un vector ordenado aleatoriamente.
	
	d. Se discutirá el por qué de los resultados y las interpretaciones de los mismos.
	
	e. Finalmente, se concluirá qué tiempo de tipo de carga computacional tiene cada función y una conclusión final.

########################################################################
    Comprobación de Carga Computacional de las Funciones Principales 
########################################################################

Tabla 1: Insertar en Montículo

     n    |   Time (µs)  |   t(n)/f(n)  |   t(n)/g(n)  |   t(n)/h(n)
------------------------------------------------------------------------
*     500 |      11.1890 |   0.02237800 | x 0.00360087 |  0.000044756
*    1000 |      13.5060 |   0.01350600 |   0.00195519 |  0.000013506
*    2000 |      16.1540 |   0.00807700 | x 0.00106264 |  0.000004039
*    4000 |      47.1340 |   0.01178350 |   0.00142072 |  0.000002946
*    8000 |     103.6260 |   0.01295325 |   0.00144130 |  0.000001619
*   16000 |     227.1100 |   0.01419438 |   0.00146631 |  0.000000887
*   32000 |     477.2980 | x 0.01491556 |   0.00143785 |  0.000000466
------------------------------------------------------------------------

COTAS AJUSTADAS: 
-> f(n) es "n"
-> g(n) es "n * log n"
-> h(n) es "n^2"

x: casos anómalos
*: tiempo AJUSTADO promedio (en µs) de 1000 ejecuciones del algoritmo.

- Discusión: Comenzando con la primera función, Insertar Montículo, podemos ver de primeras un comportamiento dividido en dos secciones.
La primera, de 500 a 2000 elementos, vemos como el tiempo de inserción es bastante similar, oscilando los 13 microsegundos. Sin embargo,
a partir de ahí, con cada duplicación de elementos, el tiempo también se duplica. Esto realmente es esperable, pues la carga computacional
que tiene este algoritmo es de O(n log n), así que esos datos pequeños son esperables que tengan un tiempo similar de inserción.

- Interpretación: Primeramente, vemos que comparando con la cota subestimada, los datos parecen mantenerse algo estables a partir de 4000 elementos. Esto 
es posible que ocurra por diversos motivos, aunque el más posible sería por falta de comprobación de elementos más grandes (64000, 128000...).
Aún así, vemos un comportamiendo que tiende a disminuir a medida que los números de elementos aumentan.
De manera inversa, los elementos de la cota sobreestimada parecen reducirse drásticamente con cada duplicación de elementos desde el principio,
con un comportamiento más realista a lo que esperamos.
Finalmente, en la cota ajustada, vemos que los tiempos oscilan sobre los 0.0014 microsegundos, con algunas mediciones anómalas.

Conclusión: Teniendo en cuenta esto, podemos decir que la inserción en un montículo tiene una carga computacional de O(n*log n).

Tabla 2: Ordenar Montículo

     n    |   Time (µs)  |   t(n)/f(n)  |   t(n)/g(n)  |   t(n)/h(n)
------------------------------------------------------------------------
*     500 |       3.4470 |   0.15415453 |   0.00198921 |  0.000013788
*    1000 |       7.8920 |   0.24956695 |   0.00198239 |  0.000007892
*    2000 |      14.8210 |   0.33140763 |   0.00162048 |  0.000003705
*    4000 |      43.4920 |   0.68766890 |   0.00206986 |  0.000002718
*    8000 |     105.0930 |   1.17497546 | x 0.00217706 |  0.000001642
*   16000 |     230.1630 |   1.81959828 |   0.00207537 |  0.000000899
*   32000 |     479.1880 |   2.67874236 |   0.00188075 |  0.000000468
------------------------------------------------------------------------
COTAS AJUSTADAS:
-> f(n) es "n^0.5"
-> g(n) es "n^1.199999"
-> h(n) es "n^2"

x: caso anómalo
*: tiempo AJUSTADO promedio (en µs) de 1000 ejecuciones del algoritmo.

- Discusión: Comparando esta función con la anterior, vemos un comportamiento más lineal desde el principio. Los tiempos crecen linealmente
a la par que con los elementos a ordenar del montículo.

- Interpretación: Las cotas subestimada, sobreestimada y ajustada se adaptan fielmente a como deben responder, es decir, la subestimada 
crece a medida que los datos aumentan, la ajustada oscila entre un valor de 0.0019 y 0.0021 desde el principio y la cota sobreestimada
disminuye a medida que los datos aumentan. Un comportamiento lineal, tal y como podríamos esperar de la función.

Conclusión: Teniendo en cuenta esto, podemos decir con certeza que la carga computacional de ordenar Monticulo es de O(n^1.1999999).

########################################################################
    Comprobación de Carga Computacional de las Ordenaciones
########################################################################

**** Tabla 1: Ordenación de Vector Ordenado ascendientemente

     n    |   Time(µs)   |    t(n)/f(n)   |   t(n)/g(n)   |   t(n)/h(n)
---------------------------------------------------------------------------
*     500 |      13.5770 |    0.607181899 | x 0.007590582 |   0.000054308
*    1000 |      37.2980 |    1.179466322 |   0.009044520 |   0.000037298
*    2000 |      93.8690 |    2.098974650 |   0.009873041 |   0.000023467
*    4000 |     228.6430 |    3.615163255 | x 0.010430747 |   0.000014290
*    8000 |     487.7720 |    5.453456748 |   0.009651685 |   0.000007621
    16000 |    1086.0000 |    8.585583847 |   0.009320621 |   0.000004242
    32000 |    2231.0000 |   12.471669145 |   0.008305071 |   0.000002179
---------------------------------------------------------------------------

COTAS AJUSTADAS:
-> f(n) es "n^0.5"
-> g(n) es "n^1.2051"
-> h(n) es "n^2"

[Tiempos de Otras Ordenaciones para 32000 elementos]

-> Ordenacion por Inserción [O(n)]= 0.002381188
-> Ordenación Rápida [O(n ^1,052)] = 0.026275288

x: caso anómalo
*: tiempo AJUSTADO promedio (en µs) de 1000 ejecuciones del algoritmo.

- Discusión: Lo que esperaríamos de antemano en este tipo de casos, y teniendo en cuenta que estamos trabajando con montículos de mínimos,
podríamos esperar tiempos comparados con la ajustada muy bajos, y eso obtenemos en este ejemplo.
Al estar el vector ordenado, podemos ver que los tiempos ajustados se mantienen sobre 0.008 y 0.009 microsegundos desde el principio. Asimismo,
las cotas sobrestimadas y subestimadas siguen su comportamiento adecuado.

- Interpretación y Comparación: Sabemos que teóricamente (y en la práctica también se ve), que la ordenación por Inserción es de las ordenaciones
más rápidas cuando tenemos los elementos ordenados. Nosotros hemos calculado un tiempo de 0.0023 microsegundos, eso es 1/4 del tiempo que
tenemos a la hora de ordenar por montículos de mínimos. Sin embargo, vemos que esta ordenación es mejor que la ordenación por quicksort en
cuanto a tiempos se refiere, siendo menos de la mitad para el mismo número de elementos.

Conclusión: La carga computacional de esta ordenación es de O(n^1.2051).

**** Tabla 2: Ordenación de Vector Ordenado descendientemente

     n    |   Time(µs)   |    t(n)/f(n)   |   t(n)/g(n)   |   t(n)/h(n)
---------------------------------------------------------------------------
*     500 |      20.7670 |    0.928728474 |   0.011984294 |   0.000083068
*    1000 |      52.9890 |    1.675659309 |   0.013310327 |   0.000052989
*    2000 |     129.8180 |    2.902818727 |   0.014193916 |   0.000032454
*    4000 |     302.4270 |    4.781790730 |   0.014393028 |   0.000018902
     8000 |     638.0000 |    7.133056848 |   0.013216504 |   0.000009969
    16000 |    1487.0000 |   11.755767202 |   0.013408222 |   0.000005809
    32000 |    3319.0000 |   18.553774043 |   0.013026621 |   0.000003241
---------------------------------------------------------------------------

COTAS AJUSTADAS:
-> f(n) es "n^0.5"
-> g(n) es "n^1.199999"
-> h(n) es "n^2"

[Tiempos de Otras Ordenaciones para 32000 elementos]

-> Ordenacion por Inserción [O(n^2)]= 0.000855314
-> Ordenación Rápida [O(n ^1,052)] = 0.027295687

x: caso anómalo
*: tiempo AJUSTADO promedio (en µs) de 1000 ejecuciones del algoritmo.

- Discusión: Este es siempre el peor caso para cualquier ordenación (ascediente). Vemos que los tiempos se disparan en magnitud, incluidos los
tiempos de las cotas. Esto es un comportamiento normal y esperable, y cada una de las cotas se comportan de manera adecuada, viendo que
sobre todo, la cota ajustada oscila sobre unos 0.014 microsegundos, curiosamente 10 veces más que la función de insertar Montículo. 

- Interpretación y Comparación: De momento, seguimos con algo similar a la tabla anterior. Vemos que, aunque las cotas no sean la misma, los
tiempos de la ordenación por Inserción son mucho mejores que los de la Ordenación por Montículo de mínimos, pero a su vez es mejor que el de
Ordenación Rápida.

Conclusión: La carga computacional de esta ordenación es de O(n^1.199999).

**** Tabla 3: Ordenación de Vector Ordenado aleatoriamente

     n    |   Time(µs)   |    t(n)/f(n)   |   t(n)/g(n)   |   t(n)/h(n)
---------------------------------------------------------------------------
*     500 |      33.9330 |    1.517529894 |   0.010920399 |   0.000135732
*    1000 |      75.3220 |    2.381890779 |   0.010903976 |   0.000075322
*    2000 |     153.2440 |    3.426640011 |   0.010080645 |   0.000038311
*    4000 |     330.5780 |    5.226897122 |   0.009964312 |   0.000020661
     8000 |     780.0000 |    8.720665112 |   0.010848767 |   0.000012187
    16000 |    1780.0000 |   14.072135588 |   0.011492360 |   0.000006953
    32000 |    3335.0000 |   18.643216762 |   0.010046642 |   0.000003257
---------------------------------------------------------------------------
AJUSTADA: nlogn

COTAS AJUSTADAS:
-> f(n) es "n^0.5"
-> g(n) es "n * log n"
-> h(n) es "n^2"

[Tiempos de Otras Ordenaciones para 32000 elementos]

-> Ordenacion por Inserción [O(n^2)]= 0.000443792
-> Ordenación Rápida [O(n log n)] = 0.011688447

x: caso anómalo
*: tiempo AJUSTADO promedio (en µs) de 1000 ejecuciones del algoritmo.

- Discusión: De nuevo, no tenemos nada que salte a la vista, todo parece funcionar de manera correcta, siguiendo un patrón muy similar al
caso descendiente. Esta tabla, al contener datos aleatorios, puede tender al final a un caso u a otro, y parece que al que más se parece
es al del vector descentiente.

- Interpretación y Comparación: Curiosamente, aquí podemos ver finalmente el por qué esta ordenación es usada en comparación al resto. Si nos
fijamos en los tiempos de la ordenación por inserción, vemos tiempos ínfimos con una complejidad cuadrática. Sin embargo, en el caso de Quicksort
tenemos un tiempo extremadamente similar al nuestro ajustado, de 0.01 microsegundos, con la misma complejidad. 

Conclusión: La carga computacional de esta ordenación es de O(n * log n).

-- Conclusión final:

Tras analizar cada uno de los casos y compararlos con otros algoritmos de orenación, podemos llegar a las siguientes conclusiones:

1. Para casos de vectores ordenados ascendientemente, la Ordenación por Inserción es la mejor, con una carga computacional lineal O(n) y
tiempos ridículamente pequeños para grandes números. Obviamente, esto no es de mucha utilidad, pues realmente el algoritmo no ordena nada
pues ya estaría ordenado. Seguidamente, le seguiría

2. Para casos de vectores ordenados descendientemente, vemos que la Ordenación Rápida, o "Quicksort", es la mejor, con una carga computacional
baja O(n ^1,052), aunque sus tiempos son algo peores que los de la ordenación por montículos de mínimos.

3. Para el caso de vectores desordenados, u ordenados aleatoriamente, podemos ver que tanto la Ordenación por Montículos como la Ordenación
Rápida tienen una carga computacional mucho mejor que la ordenación por Inserción.